import requests
from bs4 import BeautifulSoup as bs
import pandas as pd
from pyowm import OWM
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
import logging
import markups as nav
from pycbrf import ExchangeRates
import random

owm = OWM('cf3b80c3d4d89a6e5f283d3c2088de66')
mgr = owm.weather_manager()
observation = mgr.weather_at_place('Khabarovsk,RU')
w = observation.weather

mouths = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'}

TOKEN = '5116309199:AAHnaiV0dkA_CXcFy_59ScGFc8KWpdsUzVc'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await message.answer(
        'üî∏ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\nüî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ \n ‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ /start'.format(
            message.from_user), reply_markup=nav.mainMenu)


@dp.message_handler(commands=['help'])
async def command_start(message: types.Message):
    await message.answer('–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ https://t.me/SK_2can'.format(message.from_user),
                         reply_markup=nav.mainMenu)


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == 'üé±–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        await bot.send_message(message.chat.id,
                               '–í–∞—à–µ —á–∏—Å–ª–æ: ' + f'<tg-spoiler> {str(random.randint(1, 101))} </tg-spoiler>',
                               parse_mode=types.ParseMode.HTML)

    elif message.text == 'üíµ–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç':
        rates = (ExchangeRates(datetime.now()))
        await bot.send_message(message.chat.id,
                               '–ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ ' + str(rates.date_received.day) + ' ' + mouths[rates.date_received.month] + ':' + '\n' 'üíµ–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: ' + str(rates['USD'].rate) + ' —Ä—É–±.' + '\n' + 'üí∂–ö—É—Ä—Å –µ–≤—Ä–æ: ' +
                               str(rates['EUR'].rate) + ' —Ä—É–±.')

    elif message.text == '‚òîÔ∏è–ü–æ–≥–æ–¥–∞':
        await bot.send_message(message.chat.id,
                               'üå§–ü–æ–≥–æ–¥–∞ –≤ –•–∞–±–∞—Ä–æ–≤—Å–∫–µ: ' + '\n' + w.detailed_status + '\n' + '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' +
                               str(round(w.temperature('celsius')['temp'])) + '¬∞' + '\n' + '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ' + str(
                                   round(w.wind()['speed'])) +
                               ' –º.—Å')


@dp.callback_query_handler(text_contains='btn0')
async def wash(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω–∫—É', reply_markup=nav.inline_kb2)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
