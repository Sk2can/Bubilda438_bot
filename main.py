import requests
import re
from bs4 import BeautifulSoup as bs
import pandas as pd
from pyowm import OWM
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
import logging
import markups as nav
from pycbrf import ExchangeRates
import random

owm = OWM('cf3b80c3d4d89a6e5f283d3c2088de66')
mgr = owm.weather_manager()
observation = mgr.weather_at_place('Khabarovsk,RU')
w = observation.weather

mouths = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'}

TOKEN = '5116309199:AAHnaiV0dkA_CXcFy_59ScGFc8KWpdsUzVc'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await message.answer(
        'üî∏ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\nüî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ \n ‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ /start'.format(
            message.from_user), reply_markup=nav.mainMenu)


@dp.message_handler(commands=['help'])
async def command_start(message: types.Message):
    await message.answer('–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ https://t.me/SK_2can'.format(message.from_user),
                         reply_markup=nav.mainMenu)


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == 'üé±–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        await bot.send_message(message.chat.id,
                               '–í–∞—à–µ —á–∏—Å–ª–æ: ' + f'<tg-spoiler> {str(random.randint(1, 101))} </tg-spoiler>',
                               parse_mode=types.ParseMode.HTML)

    elif message.text == 'üíµ–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç':
        rates = (ExchangeRates(datetime.now()))
        await bot.send_message(message.chat.id,
                               '–ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ ' + str(rates.date_received.day) + ' ' + mouths[rates.date_received.month] + ':' + '\n' 'üíµ–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: ' + str(rates['USD'].rate) + ' —Ä—É–±.' + '\n' + 'üí∂–ö—É—Ä—Å –µ–≤—Ä–æ: ' +
                               str(rates['EUR'].rate) + ' —Ä—É–±.')

    elif message.text == '‚òîÔ∏è–ü–æ–≥–æ–¥–∞':
        await bot.send_message(message.chat.id,
                               'üå§–ü–æ–≥–æ–¥–∞ –≤ –•–∞–±–∞—Ä–æ–≤—Å–∫–µ: ' + '\n' + w.detailed_status + '\n' + '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' +
                               str(round(w.temperature('celsius')['temp'])) + '¬∞' + '\n' + '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ' + str(
                                   round(w.wind()['speed'])) +
                               ' –º.—Å')

    elif message.text == 'üü°–ú–æ–Ω–µ—Ç—ã':
        r = requests.get("https://ru.ucoin.net/gallery/?list=all", headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 YaBrowser/23.1.3.949 Yowser/2.5 Safari/537.36'})
        html = bs(r.text, 'html.parser')

        el = html.find("div", class_="coin-desc")

        link = str(el) [str(el).find("href") : str(el).find('title')]
        link = link[link.find('"')+1 : link.rfind('"')]
        link="https://ru.ucoin.net" + link
        r = requests.get(str(link), headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 YaBrowser/23.1.3.949 Yowser/2.5 Safari/537.36'})
        html = bs(r.text, 'html.parser')
        coin_info = html.find("table", class_="tbl coin-info")
        avers_img = html.find("img", id="coin-img1")
        reverse_img = html.find("img", id="coin-img2")

        price = html.find("a", class_="right price-container")
        price = str(price)[str(price).find("–¶–µ–Ω–∞")+12: str(price).find("</span>")]
        country = str(coin_info)[str(coin_info).find("–°—Ç—Ä–∞–Ω–∞")+15: ]
        country = str(country)[:str(country).find("</")]
        value = str(coin_info)[str(coin_info).find("–ù–æ–º–∏–Ω–∞–ª")+16:]
        value = str(value)[: str(value).find("</")]
        year = str(coin_info)[str(coin_info).find("–ì–æ–¥")+12:]
        year = str(year)[: str(year).find("</")]
        period = str(coin_info)[str(coin_info).find("–ü–µ—Ä–∏–æ–¥")+15:]
        period = str(period)[: str(period).find("</")]
        material = str(coin_info)[str(coin_info).find("–ú–∞—Ç–µ—Ä–∏–∞–ª")+17: ]
        material = str(material)[: str(material).find("</")]
        weight = str(coin_info)[str(coin_info).find("–í–µ—Å")+16: ]
        weight = str(weight)[: str(weight).find("</")]
        diameter = str(coin_info)[str(coin_info).find("–î–∏–∞–º–µ—Ç—Ä")+21:]
        diameter = str(diameter)[: str(diameter).find("</")]

        print(price)
        print(country)
        print(value)
        print(year)
        print(period)
        print(material)
        print(weight)
        print(diameter)

        avers_img = str(avers_img) [str(avers_img).find('src="')+5 : str(avers_img).find('" title')]
        reverse_img = str(reverse_img)[str(reverse_img).find('src="') + 5: str(reverse_img).find('" title')]

        media = types.MediaGroup()
        msg = country + '  ' + value + ',  ' + year + '\n' + '–¶–µ–Ω–∞:  ' + price + ' –†—É–±.' + '\n' + '–ü–µ—Ä–∏–æ–¥:  ' + period + '\n' + '–ú–∞—Ç–µ—Ä–∏–∞–ª:  ' + material + '\n' + '–í–µ—Å:  ' + weight + '  –≥' +'\n' + '–î–∏–∞–º–µ—Ç—Ä:  ' + diameter + '  –º–º'
        media.attach_photo(avers_img, msg)
        media.attach_photo(reverse_img)
        await bot.send_media_group(message.chat.id, media=media)



@dp.callback_query_handler(text_contains='btn0')
async def wash(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω–∫—É', reply_markup=nav.inline_kb2)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
